import { OneArgFunctionReturningPromise } from "./types";
interface Options {
    batchSize?: number;
    batchDelayMs?: number;
}
/**
 * Wraps a Promise returning function that you want to call in batches.
 * This version will only return once the entire batch is complete.
 *
 * Note: fn must take exactly one argument. If you need to use a function taking
 * multiple arguments, make a small wrapper.
 *
 * @param opts options
 * @param opts.batchSize default 4. the number of concurrent executions of fn
 * @param opts.batchDelayMs default 150. milliseconds to delay between batches. Only applied from the 2d batch onwards.
 * @param fn the function to wrap
 *
 */
export declare function batch<P, R>(optsOrFn: Options | OneArgFunctionReturningPromise<P, R>, fn?: OneArgFunctionReturningPromise<P, R>, opts?: Options): (params: P[]) => Promise<R[]>;
export {};
