import { FunctionReturningPromise, PromiseReturnType } from "./types";
interface Options {
    tries?: number;
    startMs?: number;
    pow?: number;
    maxMs?: number;
    jitter?: number;
}
/**
 *
 * Wrap any Promise returning function with retries and backoff.
 * Sensible defaults for typical interactive networking
 * scenarios, such as browser requests.
 *
 * Default settings will result in delays of (in ms):
 * 250, 2000, 6750, 16000, 31250
 *
 * @param opts           - options
 * @param opts.tries     - default 6, Maximum attempts, including initial try.
 * @param opts.startMs   - default 250, statring delay after the first failure
 * @param opts.pow       - default 3, Backoff power. float values are fine.
 * @param opts.maxMs     - default 300000 (5 minutes), upper limit on the delay. Won't be reached with default settings.
 * @param opts.jitter    - default 0.25, amount of jitter to apply. Removes a random value (0-N*delay) from delay.
 * @param func           - the function to wrap.
 *
 */
export declare function retryWithBackoff<T extends FunctionReturningPromise>(optsOrFn: Options | T, fn?: T): (...args: Parameters<T>) => Promise<PromiseReturnType<T>>;
export {};
