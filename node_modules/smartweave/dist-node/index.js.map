{"version":3,"file":"index.js","sources":["../dist-src/contract-create.js","../dist-src/utils.js","../dist-src/contract-step.js","../dist-src/contract-read.js","../dist-src/smartweave-global.js","../dist-src/contract-load.js","../dist-src/contract-interact.js","../dist-src/weighted-pst-holder.js"],"sourcesContent":["/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\nexport async function createContract(arweave, wallet, contractSrc, initState, minFee) {\n    let srcTx = await arweave.createTransaction({ data: contractSrc }, wallet);\n    srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n    srcTx.addTag('App-Version', '0.3.0');\n    srcTx.addTag('Content-Type', 'application/javascript');\n    await arweave.transactions.sign(srcTx, wallet);\n    const response = await arweave.transactions.post(srcTx);\n    if ((response.status == 200) || (response.status == 208))\n        return createContractFromTx(arweave, wallet, srcTx.id, initState, minFee);\n    else\n        throw new Error(`Unable to write Contract Source.`);\n}\n/**\n * Create a new conntract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n */\nexport async function createContractFromTx(arweave, wallet, srcTxId, state, minFee) {\n    // Create a contract from a stored source TXID, setting the default state.\n    let contractTX = await arweave.createTransaction({ data: state }, wallet);\n    contractTX.addTag('App-Name', 'SmartWeaveContract');\n    contractTX.addTag('App-Version', '0.3.0');\n    contractTX.addTag('Contract-Src', srcTxId);\n    contractTX.addTag('Content-Type', 'application/json');\n    if (minFee) {\n        contractTX.addTag('Min-Fee', minFee.toString());\n    }\n    await arweave.transactions.sign(contractTX, wallet);\n    const response = await arweave.transactions.post(contractTX);\n    if ((response.status == 200) || (response.status == 208))\n        return contractTX.id;\n    else\n        throw new Error(`Unable to write Contract Initial State`);\n}\n","export function getTag(tx, name) {\n    let tags = tx.get('tags');\n    for (let i = 0; i < tags.length; i++) {\n        // decoding tags can throw on invalid utf8 data.\n        try {\n            if (tags[i].get('name', { decode: true, string: true }) == name)\n                return tags[i].get('value', { decode: true, string: true });\n        }\n        catch (e) {\n        }\n    }\n    return false;\n}\n/**\n * Unpacks string tags from a Tx and puts in a KV map\n * Tags that appear multiple times will be converted to an\n * array of string values, ordered as they appear in the tx.\n *\n * @param tx\n */\nexport function unpackTags(tx) {\n    let tags = tx.get('tags');\n    let result = {};\n    for (let i = 0; i < tags.length; i++) {\n        try {\n            const name = tags[i].get('name', { decode: true, string: true });\n            const value = tags[i].get('value', { decode: true, string: true });\n            if (!result.hasOwnProperty(name)) {\n                result[name] = value;\n                continue;\n            }\n            result[name] = [...result[name], value];\n        }\n        catch (e) {\n            // ignore tags with invalid utf-8 strings in key or value.\n        }\n    }\n    return result;\n}\nexport function arrayToHex(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += (\"0\" + arr[i].toString(16)).slice(-2);\n    }\n    return str;\n}\n","/**\n * Executes a single interaction against the contract source code and state, and\n * returns the new state, or 'false' if there was an error.\n *\n * Callers should replay all interactions in the correct order to get the correct\n * state to execute against.\n *\n * @param contractSrc   the source code of the contract\n * @param input         the input interaction, should be a plain Js object\n * @param state         the current state of the contract\n * @param caller        the wallet address of the caller who is interacting with the contract\n */\nexport async function execute(handler, interaction, state) {\n    try {\n        const result = await handler(state, interaction);\n        if (result && (result.state || result.result)) {\n            return {\n                type: 'ok',\n                result: result.result,\n                state: result.state || state\n            };\n        }\n        // Will be caught below as unexpected exception.\n        throw new Error(`Unexpected result from contract: ${JSON.stringify(result)}`);\n    }\n    catch (err) {\n        if (err.name === 'ContractError') {\n            return {\n                type: 'error',\n                result: err.message,\n                state: state,\n            };\n        }\n        return {\n            type: 'exception',\n            result: `${(err && err.stack) || (err && err.message)}`,\n            state: state,\n        };\n    }\n}\n","import { loadContract } from './contract-load';\nimport { retryWithBackoff, batch, softFailWith } from 'promises-tho';\nimport { getTag, arrayToHex } from './utils';\nimport { execute } from './contract-step';\n/**\n * Queries all interaction transactions and replays a contract to its latest state.\n *\n * If height is provided, will replay only to that block height.\n *\n * @param arweave     an Arweave client instance\n * @param contractId  the Transaction Id of the contract\n * @param height      if specified the contract will be replayed only to this block height\n */\nexport async function readContract(arweave, contractId, height = Number.POSITIVE_INFINITY) {\n    const contractInfo = await loadContract(arweave, contractId);\n    let state;\n    try {\n        state = JSON.parse(contractInfo.initState);\n    }\n    catch (e) {\n        throw new Error(`Unable to parse initial state for contract: ${contractId}`);\n    }\n    // Load all the interaction txs relevant to this contract. \n    // This can be made a lot cleaner with some GraphQL features, \n    // (block info in results, pagination)\n    // but for now, we stick with arql and use some utils to help \n    // with concurency and retry on errors. \n    // (we can be firing off thousands of requests here) \n    const arql = {\n        op: 'and',\n        expr1: {\n            op: 'equals',\n            expr1: 'App-Name',\n            expr2: 'SmartWeaveAction',\n        },\n        expr2: {\n            op: 'equals',\n            expr1: 'Contract',\n            expr2: contractId\n        }\n    };\n    let transactions = await arweave.arql(arql);\n    const getTxInfoFn = retryWithBackoff({ tries: 3, startMs: 1000 }, (id) => getFullTxInfo(arweave, id));\n    const batcher = batch({ batchDelayMs: 50, batchSize: 3 }, softFailWith(undefined, getTxInfoFn));\n    console.log(`Query returned ${transactions.length} interactions`);\n    let unconfirmed = await batcher(transactions);\n    console.log(`Recieved info for ${unconfirmed.length} transactions`);\n    // Filter out txs that are not confirmed yet, not found, \n    // or are below the height we are replaying to.\n    let txInfos = unconfirmed\n        .filter(x => x &&\n        x.info.confirmed &&\n        x.info.confirmed.block_height <= height);\n    console.log(`Replaying ${txInfos.length} confirmed interactions`);\n    txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n    const { handler, swGlobal } = contractInfo;\n    for (let i = 0; i < txInfos.length; i++) {\n        let input;\n        try {\n            input = getTag(txInfos[i].tx, 'Input');\n            input = JSON.parse(input);\n        }\n        catch (e) { }\n        if (!input) {\n            console.warn(`Skipping tx with missing or invalid Input tag - ${txInfos[i].id}`);\n            continue;\n        }\n        const interaction = {\n            input: input,\n            caller: txInfos[i].from,\n        };\n        swGlobal._activeTx = txInfos[i];\n        const result = await execute(handler, interaction, state);\n        if (result.type === 'exception') {\n            console.warn(`${result.result}`);\n            console.warn(`Executing of interaction: ${txInfos[i].id} threw exception.`);\n        }\n        if (result.type === 'error') {\n            console.warn(`${result.result}`);\n            console.warn(`Executing of interaction: ${txInfos[i].id} returned error.`);\n        }\n        state = result.state;\n    }\n    return state;\n}\n// This gets the full Tx Info, and calcutes a sort key.\n// It needs to get the block_height and indep_hash from\n// the status endpoint as well as the tx itself. Returns \n// undefined if the transactions is not confirmed. \nasync function getFullTxInfo(arweave, id) {\n    const [tx, info] = await Promise.all([\n        arweave.transactions.get(id).catch(e => {\n            if (e.type === 'TX_PENDING') {\n                return undefined;\n            }\n            throw (e);\n        }),\n        arweave.transactions.getStatus(id)\n    ]);\n    if (!tx || !info || !info.confirmed) {\n        return undefined;\n    }\n    // Construct a string that will lexographically sort.\n    // { block_height, sha256(block_indep_hash + txid) }\n    // pad block height to 12 digits and convert hash value \n    // to a hex string.\n    const blockHashBytes = arweave.utils.b64UrlToBuffer(info.confirmed.block_indep_hash);\n    const txIdBytes = arweave.utils.b64UrlToBuffer(id);\n    const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n    const hashed = arrayToHex(await arweave.crypto.hash(concatted));\n    const block_height = `000000${info.confirmed.block_height}`.slice(-12);\n    const sortKey = `${block_height},${hashed}`;\n    return { tx, info, id: tx.id, sortKey, from: await arweave.wallets.ownerToAddress(tx.owner) };\n}\n","import { unpackTags } from \"./utils\";\nimport { readContract } from \"./contract-read\";\n/**\n *\n * This class is be exposed as a global for contracts\n * as 'SmartWeave' and provides an API for getting further\n * information or using utility and crypto functions from\n * inside the contracts execution.\n *\n * It provides an api:\n *\n * - SmartWeave.transaction.id\n * - SmartWeave.transaction.reward\n * - SmartWeave.block.height\n * - etc\n *\n * and access to some of the arweave utils:\n * - SmartWeave.arweave.utils\n * - SmartWeave.arweave.crypto\n * - SmartWeave.arweave.wallets\n * - SmartWeave.arweave.ar\n *\n */\nexport class SmartWeaveGlobal {\n    constructor(arweave) {\n        this.arweave = {\n            ar: arweave.ar,\n            utils: arweave.utils,\n            wallets: arweave.wallets,\n            crypto: arweave.crypto,\n        };\n        this.transaction = new Transaction(this);\n        this.block = new Block(this);\n        this.contracts = {\n            readContractState: (contractId, height) => readContract(arweave, contractId, height || (this._isDryRunning ? Number.POSITIVE_INFINITY : this.block.height))\n        };\n    }\n    get _isDryRunning() {\n        return !this._activeTx;\n    }\n}\nclass Transaction {\n    constructor(global) {\n        this.global = global;\n    }\n    get id() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.id;\n    }\n    get owner() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.owner;\n    }\n    get target() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.target;\n    }\n    get tags() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return unpackTags(this.global._activeTx.tx);\n    }\n    get quantity() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.quantity;\n    }\n    get reward() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.reward;\n    }\n}\nclass Block {\n    constructor(global) {\n        this.global = global;\n    }\n    get height() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.info.confirmed.block_height;\n    }\n    get indep_hash() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.info.confirmed.block_indep_hash;\n    }\n}\n","import { getTag } from './utils';\nimport { SmartWeaveGlobal } from './smartweave-global';\n/**\n * Loads the contract source, initial state and other parameters\n *\n * @param arweave     an Arweave client instance\n * @param contractID  the Transaction Id of the contract\n */\nexport async function loadContract(arweave, contractID) {\n    try {\n        // Generate an object containing the details about a contract in one place.\n        const contractTX = await arweave.transactions.get(contractID);\n        const contractSrcTXID = getTag(contractTX, 'Contract-Src');\n        const minFee = getTag(contractTX, 'Min-Fee');\n        const contractSrcTX = await arweave.transactions.get(contractSrcTXID);\n        const contractSrc = contractSrcTX.get('data', { decode: true, string: true });\n        const state = contractTX.get('data', { decode: true, string: true });\n        //console.log(`${contractSrcTXID} (Src) \\n`, contractSrc);\n        //console.log(`${contractID} (State) \\n`, state);\n        const { handler, swGlobal } = createContractExecutionEnvironment(arweave, contractSrc);\n        return {\n            id: contractID,\n            contractSrc: contractSrc,\n            initState: state,\n            minFee: minFee,\n            contractTX,\n            handler,\n            swGlobal\n        };\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(`Unable to load contract ${contractID}.`);\n    }\n}\n/**\n * Translates a contract source code into a Js function that can be called, and sets\n * up two globals, SmartWeave and the ContractError exception.\n *\n * At the moment this uses the Function() constructor (basically the same as eval),\n * But the design is geared toward switching to Realms or something like\n * https://github.com/justjake/quickjs-emscripten. (probably the latter)\n *\n * In the current implemention, using Function(), the 'globals' are actually\n * just lexically scoped vars, unique to each instance of a contract.\n *\n * @param contractSrc the javascript source for the contract. Must declare a handle() function\n */\nexport function createContractExecutionEnvironment(arweave, contractSrc) {\n    // Convert from ES Module format to something we can run inside a Function.\n    // just removes the `export` keyword and adds ;return handle to the end of the function.\n    // We also assign the passed in SmartWeaveGlobal to SmartWeave, and declare \n    // the ContractError exception. \n    // We then use `new Function()` which we can call and get back the returned handle function\n    // which has access to the per-instance globals. \n    contractSrc = contractSrc.replace(/export\\s+async\\s+function\\s+handle/gmu, 'async function handle');\n    contractSrc = contractSrc.replace(/export\\s+function\\s+handle/gmu, 'function handle');\n    const ContractErrorDef = `class ContractError extends Error { constructor(message) { super(message); this.name = 'ContractError' } };`;\n    const ContractAssertDef = `function ContractAssert(cond, message) { if (!cond) throw new ContractError(message) };`;\n    const returningSrc = `const SmartWeave = swGlobal;\\n\\n${ContractErrorDef}\\n${ContractAssertDef}\\n${contractSrc}\\n\\n;return handle;`;\n    const swGlobal = new SmartWeaveGlobal(arweave);\n    const getContractFunction = new Function('swGlobal', returningSrc);\n    //console.log(returningSrc);\n    return {\n        handler: getContractFunction(swGlobal),\n        swGlobal\n    };\n}\n","import { loadContract } from './contract-load';\nimport { readContract } from './contract-read';\nimport { execute } from './contract-step';\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n */\nexport async function interactWrite(arweave, wallet, contractId, input) {\n    // Use a random value in the data body. We must put\n    // _something_ in the body, because a tx must have data or target\n    // to be valid. The value doesn't matter, but something sorta random\n    // helps because it will generate a different txid.\n    let interactionTx = await arweave.createTransaction({\n        data: Math.random()\n            .toString()\n            .slice(-4)\n    }, wallet);\n    if (!input) {\n        throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n    }\n    interactionTx.addTag('App-Name', 'SmartWeaveAction');\n    interactionTx.addTag('App-Version', '0.3.0');\n    interactionTx.addTag('Contract', contractId);\n    interactionTx.addTag('Input', JSON.stringify(input));\n    await arweave.transactions.sign(interactionTx, wallet);\n    const response = await arweave.transactions.post(interactionTx);\n    if (response.status != 200)\n        return false;\n    return interactionTx.id;\n}\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n */\nexport async function interactWriteDryRun(arweave, wallet, contractId, input) {\n    const contractInfo = await loadContract(arweave, contractId);\n    const latestState = await readContract(arweave, contractId);\n    const from = await arweave.wallets.jwkToAddress(wallet);\n    const interaction = {\n        input: input,\n        caller: from\n    };\n    return execute(contractInfo.handler, interaction, latestState);\n}\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n */\nexport async function interactRead(arweave, wallet, contractId, input) {\n    const contractInfo = await loadContract(arweave, contractId);\n    const latestState = await readContract(arweave, contractId);\n    const from = await arweave.wallets.jwkToAddress(wallet);\n    const interaction = {\n        input: input,\n        caller: from\n    };\n    const result = await execute(contractInfo.handler, interaction, latestState);\n    return result.result;\n}\n","/**\n * Given an map of address->balance, select one random address\n * weighted by the amount of tokens they hold.\n *\n * @param balances  A balances object, where the key is address and the value is the number of tokens they hold\n */\nexport function selectWeightedPstHolder(balances) {\n    // Count the total tokens\n    let totalTokens = 0;\n    for (const address of Object.keys(balances)) {\n        totalTokens += balances[address];\n    }\n    // Create a copy of balances where the amount each holder owns is represented\n    // by a value 0-1.\n    const weighted = {};\n    for (const address of Object.keys(balances)) {\n        weighted[address] = balances[address] / totalTokens;\n    }\n    let sum = 0;\n    const r = Math.random();\n    for (const address of Object.keys(weighted)) {\n        sum += weighted[address];\n        if (r <= sum && weighted[address] > 0) {\n            return address;\n        }\n    }\n    throw new Error(`Unable to select token holder`);\n}\n"],"names":["createContract","arweave","wallet","contractSrc","initState","minFee","srcTx","createTransaction","data","addTag","transactions","sign","response","post","status","createContractFromTx","id","Error","srcTxId","state","contractTX","toString","getTag","tx","name","tags","get","i","length","decode","string","e","unpackTags","result","value","hasOwnProperty","arrayToHex","arr","str","slice","execute","handler","interaction","type","JSON","stringify","err","message","stack","readContract","contractId","height","Number","POSITIVE_INFINITY","contractInfo","loadContract","parse","arql","op","expr1","expr2","getTxInfoFn","retryWithBackoff","tries","startMs","getFullTxInfo","batcher","batch","batchDelayMs","batchSize","softFailWith","undefined","console","log","unconfirmed","txInfos","filter","x","info","confirmed","block_height","sort","a","b","sortKey","localeCompare","swGlobal","input","warn","caller","from","_activeTx","Promise","all","catch","getStatus","blockHashBytes","utils","b64UrlToBuffer","block_indep_hash","txIdBytes","concatted","concatBuffers","hashed","crypto","hash","wallets","ownerToAddress","owner","SmartWeaveGlobal","constructor","ar","transaction","Transaction","block","Block","contracts","readContractState","_isDryRunning","global","target","quantity","reward","indep_hash","contractID","contractSrcTXID","contractSrcTX","createContractExecutionEnvironment","error","replace","ContractErrorDef","ContractAssertDef","returningSrc","getContractFunction","Function","interactWrite","interactionTx","Math","random","interactWriteDryRun","latestState","jwkToAddress","interactRead","selectWeightedPstHolder","balances","totalTokens","address","Object","keys","weighted","sum","r"],"mappings":"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"}