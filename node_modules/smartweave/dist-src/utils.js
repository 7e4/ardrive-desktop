export function getTag(tx, name) {
    let tags = tx.get('tags');
    for (let i = 0; i < tags.length; i++) {
        // decoding tags can throw on invalid utf8 data.
        try {
            if (tags[i].get('name', { decode: true, string: true }) == name)
                return tags[i].get('value', { decode: true, string: true });
        }
        catch (e) {
        }
    }
    return false;
}
/**
 * Unpacks string tags from a Tx and puts in a KV map
 * Tags that appear multiple times will be converted to an
 * array of string values, ordered as they appear in the tx.
 *
 * @param tx
 */
export function unpackTags(tx) {
    let tags = tx.get('tags');
    let result = {};
    for (let i = 0; i < tags.length; i++) {
        try {
            const name = tags[i].get('name', { decode: true, string: true });
            const value = tags[i].get('value', { decode: true, string: true });
            if (!result.hasOwnProperty(name)) {
                result[name] = value;
                continue;
            }
            result[name] = [...result[name], value];
        }
        catch (e) {
            // ignore tags with invalid utf-8 strings in key or value.
        }
    }
    return result;
}
export function arrayToHex(arr) {
    let str = '';
    for (let i = 0; i < arr.length; i++) {
        str += ("0" + arr[i].toString(16)).slice(-2);
    }
    return str;
}
