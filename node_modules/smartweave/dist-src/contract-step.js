/**
 * Executes a single interaction against the contract source code and state, and
 * returns the new state, or 'false' if there was an error.
 *
 * Callers should replay all interactions in the correct order to get the correct
 * state to execute against.
 *
 * @param contractSrc   the source code of the contract
 * @param input         the input interaction, should be a plain Js object
 * @param state         the current state of the contract
 * @param caller        the wallet address of the caller who is interacting with the contract
 */
export async function execute(handler, interaction, state) {
    try {
        const result = await handler(state, interaction);
        if (result && (result.state || result.result)) {
            return {
                type: 'ok',
                result: result.result,
                state: result.state || state
            };
        }
        // Will be caught below as unexpected exception.
        throw new Error(`Unexpected result from contract: ${JSON.stringify(result)}`);
    }
    catch (err) {
        if (err.name === 'ContractError') {
            return {
                type: 'error',
                result: err.message,
                state: state,
            };
        }
        return {
            type: 'exception',
            result: `${(err && err.stack) || (err && err.message)}`,
            state: state,
        };
    }
}
