{"version":3,"file":"index.js","sources":["../dist-src/contract-create.js","../dist-src/utils.js","../dist-src/contract-step.js","../dist-src/contract-read.js","../dist-src/smartweave-global.js","../dist-src/contract-load.js","../dist-src/contract-interact.js","../dist-src/weighted-pst-holder.js"],"sourcesContent":["/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\nexport async function createContract(arweave, wallet, contractSrc, initState, minFee) {\n    let srcTx = await arweave.createTransaction({ data: contractSrc }, wallet);\n    srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n    srcTx.addTag('App-Version', '0.3.0');\n    srcTx.addTag('Content-Type', 'application/javascript');\n    await arweave.transactions.sign(srcTx, wallet);\n    const response = await arweave.transactions.post(srcTx);\n    if ((response.status == 200) || (response.status == 208))\n        return createContractFromTx(arweave, wallet, srcTx.id, initState, minFee);\n    else\n        throw new Error(`Unable to write Contract Source.`);\n}\n/**\n * Create a new conntract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n */\nexport async function createContractFromTx(arweave, wallet, srcTxId, state, minFee) {\n    // Create a contract from a stored source TXID, setting the default state.\n    let contractTX = await arweave.createTransaction({ data: state }, wallet);\n    contractTX.addTag('App-Name', 'SmartWeaveContract');\n    contractTX.addTag('App-Version', '0.3.0');\n    contractTX.addTag('Contract-Src', srcTxId);\n    contractTX.addTag('Content-Type', 'application/json');\n    if (minFee) {\n        contractTX.addTag('Min-Fee', minFee.toString());\n    }\n    await arweave.transactions.sign(contractTX, wallet);\n    const response = await arweave.transactions.post(contractTX);\n    if ((response.status == 200) || (response.status == 208))\n        return contractTX.id;\n    else\n        throw new Error(`Unable to write Contract Initial State`);\n}\n","export function getTag(tx, name) {\n    let tags = tx.get('tags');\n    for (let i = 0; i < tags.length; i++) {\n        // decoding tags can throw on invalid utf8 data.\n        try {\n            if (tags[i].get('name', { decode: true, string: true }) == name)\n                return tags[i].get('value', { decode: true, string: true });\n        }\n        catch (e) {\n        }\n    }\n    return false;\n}\n/**\n * Unpacks string tags from a Tx and puts in a KV map\n * Tags that appear multiple times will be converted to an\n * array of string values, ordered as they appear in the tx.\n *\n * @param tx\n */\nexport function unpackTags(tx) {\n    let tags = tx.get('tags');\n    let result = {};\n    for (let i = 0; i < tags.length; i++) {\n        try {\n            const name = tags[i].get('name', { decode: true, string: true });\n            const value = tags[i].get('value', { decode: true, string: true });\n            if (!result.hasOwnProperty(name)) {\n                result[name] = value;\n                continue;\n            }\n            result[name] = [...result[name], value];\n        }\n        catch (e) {\n            // ignore tags with invalid utf-8 strings in key or value.\n        }\n    }\n    return result;\n}\nexport function arrayToHex(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += (\"0\" + arr[i].toString(16)).slice(-2);\n    }\n    return str;\n}\n","/**\n * Executes a single interaction against the contract source code and state, and\n * returns the new state, or 'false' if there was an error.\n *\n * Callers should replay all interactions in the correct order to get the correct\n * state to execute against.\n *\n * @param contractSrc   the source code of the contract\n * @param input         the input interaction, should be a plain Js object\n * @param state         the current state of the contract\n * @param caller        the wallet address of the caller who is interacting with the contract\n */\nexport async function execute(handler, interaction, state) {\n    try {\n        const result = await handler(state, interaction);\n        if (result && (result.state || result.result)) {\n            return {\n                type: 'ok',\n                result: result.result,\n                state: result.state || state\n            };\n        }\n        // Will be caught below as unexpected exception.\n        throw new Error(`Unexpected result from contract: ${JSON.stringify(result)}`);\n    }\n    catch (err) {\n        if (err.name === 'ContractError') {\n            return {\n                type: 'error',\n                result: err.message,\n                state: state,\n            };\n        }\n        return {\n            type: 'exception',\n            result: `${(err && err.stack) || (err && err.message)}`,\n            state: state,\n        };\n    }\n}\n","import { loadContract } from './contract-load';\nimport { retryWithBackoff, batch, softFailWith } from 'promises-tho';\nimport { getTag, arrayToHex } from './utils';\nimport { execute } from './contract-step';\n/**\n * Queries all interaction transactions and replays a contract to its latest state.\n *\n * If height is provided, will replay only to that block height.\n *\n * @param arweave     an Arweave client instance\n * @param contractId  the Transaction Id of the contract\n * @param height      if specified the contract will be replayed only to this block height\n */\nexport async function readContract(arweave, contractId, height = Number.POSITIVE_INFINITY) {\n    const contractInfo = await loadContract(arweave, contractId);\n    let state;\n    try {\n        state = JSON.parse(contractInfo.initState);\n    }\n    catch (e) {\n        throw new Error(`Unable to parse initial state for contract: ${contractId}`);\n    }\n    // Load all the interaction txs relevant to this contract. \n    // This can be made a lot cleaner with some GraphQL features, \n    // (block info in results, pagination)\n    // but for now, we stick with arql and use some utils to help \n    // with concurency and retry on errors. \n    // (we can be firing off thousands of requests here) \n    const arql = {\n        op: 'and',\n        expr1: {\n            op: 'equals',\n            expr1: 'App-Name',\n            expr2: 'SmartWeaveAction',\n        },\n        expr2: {\n            op: 'equals',\n            expr1: 'Contract',\n            expr2: contractId\n        }\n    };\n    let transactions = await arweave.arql(arql);\n    const getTxInfoFn = retryWithBackoff({ tries: 3, startMs: 1000 }, (id) => getFullTxInfo(arweave, id));\n    const batcher = batch({ batchDelayMs: 50, batchSize: 3 }, softFailWith(undefined, getTxInfoFn));\n    console.log(`Query returned ${transactions.length} interactions`);\n    let unconfirmed = await batcher(transactions);\n    console.log(`Recieved info for ${unconfirmed.length} transactions`);\n    // Filter out txs that are not confirmed yet, not found, \n    // or are below the height we are replaying to.\n    let txInfos = unconfirmed\n        .filter(x => x &&\n        x.info.confirmed &&\n        x.info.confirmed.block_height <= height);\n    console.log(`Replaying ${txInfos.length} confirmed interactions`);\n    txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n    const { handler, swGlobal } = contractInfo;\n    for (let i = 0; i < txInfos.length; i++) {\n        let input;\n        try {\n            input = getTag(txInfos[i].tx, 'Input');\n            input = JSON.parse(input);\n        }\n        catch (e) { }\n        if (!input) {\n            console.warn(`Skipping tx with missing or invalid Input tag - ${txInfos[i].id}`);\n            continue;\n        }\n        const interaction = {\n            input: input,\n            caller: txInfos[i].from,\n        };\n        swGlobal._activeTx = txInfos[i];\n        const result = await execute(handler, interaction, state);\n        if (result.type === 'exception') {\n            console.warn(`${result.result}`);\n            console.warn(`Executing of interaction: ${txInfos[i].id} threw exception.`);\n        }\n        if (result.type === 'error') {\n            console.warn(`${result.result}`);\n            console.warn(`Executing of interaction: ${txInfos[i].id} returned error.`);\n        }\n        state = result.state;\n    }\n    return state;\n}\n// This gets the full Tx Info, and calcutes a sort key.\n// It needs to get the block_height and indep_hash from\n// the status endpoint as well as the tx itself. Returns \n// undefined if the transactions is not confirmed. \nasync function getFullTxInfo(arweave, id) {\n    const [tx, info] = await Promise.all([\n        arweave.transactions.get(id).catch(e => {\n            if (e.type === 'TX_PENDING') {\n                return undefined;\n            }\n            throw (e);\n        }),\n        arweave.transactions.getStatus(id)\n    ]);\n    if (!tx || !info || !info.confirmed) {\n        return undefined;\n    }\n    // Construct a string that will lexographically sort.\n    // { block_height, sha256(block_indep_hash + txid) }\n    // pad block height to 12 digits and convert hash value \n    // to a hex string.\n    const blockHashBytes = arweave.utils.b64UrlToBuffer(info.confirmed.block_indep_hash);\n    const txIdBytes = arweave.utils.b64UrlToBuffer(id);\n    const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n    const hashed = arrayToHex(await arweave.crypto.hash(concatted));\n    const block_height = `000000${info.confirmed.block_height}`.slice(-12);\n    const sortKey = `${block_height},${hashed}`;\n    return { tx, info, id: tx.id, sortKey, from: await arweave.wallets.ownerToAddress(tx.owner) };\n}\n","import { unpackTags } from \"./utils\";\nimport { readContract } from \"./contract-read\";\n/**\n *\n * This class is be exposed as a global for contracts\n * as 'SmartWeave' and provides an API for getting further\n * information or using utility and crypto functions from\n * inside the contracts execution.\n *\n * It provides an api:\n *\n * - SmartWeave.transaction.id\n * - SmartWeave.transaction.reward\n * - SmartWeave.block.height\n * - etc\n *\n * and access to some of the arweave utils:\n * - SmartWeave.arweave.utils\n * - SmartWeave.arweave.crypto\n * - SmartWeave.arweave.wallets\n * - SmartWeave.arweave.ar\n *\n */\nexport class SmartWeaveGlobal {\n    constructor(arweave) {\n        this.arweave = {\n            ar: arweave.ar,\n            utils: arweave.utils,\n            wallets: arweave.wallets,\n            crypto: arweave.crypto,\n        };\n        this.transaction = new Transaction(this);\n        this.block = new Block(this);\n        this.contracts = {\n            readContractState: (contractId, height) => readContract(arweave, contractId, height || (this._isDryRunning ? Number.POSITIVE_INFINITY : this.block.height))\n        };\n    }\n    get _isDryRunning() {\n        return !this._activeTx;\n    }\n}\nclass Transaction {\n    constructor(global) {\n        this.global = global;\n    }\n    get id() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.id;\n    }\n    get owner() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.owner;\n    }\n    get target() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.target;\n    }\n    get tags() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return unpackTags(this.global._activeTx.tx);\n    }\n    get quantity() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.quantity;\n    }\n    get reward() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.tx.reward;\n    }\n}\nclass Block {\n    constructor(global) {\n        this.global = global;\n    }\n    get height() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.info.confirmed.block_height;\n    }\n    get indep_hash() {\n        if (!this.global._activeTx) {\n            throw new Error('No current Tx');\n        }\n        return this.global._activeTx.info.confirmed.block_indep_hash;\n    }\n}\n","import { getTag } from './utils';\nimport { SmartWeaveGlobal } from './smartweave-global';\n/**\n * Loads the contract source, initial state and other parameters\n *\n * @param arweave     an Arweave client instance\n * @param contractID  the Transaction Id of the contract\n */\nexport async function loadContract(arweave, contractID) {\n    try {\n        // Generate an object containing the details about a contract in one place.\n        const contractTX = await arweave.transactions.get(contractID);\n        const contractSrcTXID = getTag(contractTX, 'Contract-Src');\n        const minFee = getTag(contractTX, 'Min-Fee');\n        const contractSrcTX = await arweave.transactions.get(contractSrcTXID);\n        const contractSrc = contractSrcTX.get('data', { decode: true, string: true });\n        const state = contractTX.get('data', { decode: true, string: true });\n        //console.log(`${contractSrcTXID} (Src) \\n`, contractSrc);\n        //console.log(`${contractID} (State) \\n`, state);\n        const { handler, swGlobal } = createContractExecutionEnvironment(arweave, contractSrc);\n        return {\n            id: contractID,\n            contractSrc: contractSrc,\n            initState: state,\n            minFee: minFee,\n            contractTX,\n            handler,\n            swGlobal\n        };\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(`Unable to load contract ${contractID}.`);\n    }\n}\n/**\n * Translates a contract source code into a Js function that can be called, and sets\n * up two globals, SmartWeave and the ContractError exception.\n *\n * At the moment this uses the Function() constructor (basically the same as eval),\n * But the design is geared toward switching to Realms or something like\n * https://github.com/justjake/quickjs-emscripten. (probably the latter)\n *\n * In the current implemention, using Function(), the 'globals' are actually\n * just lexically scoped vars, unique to each instance of a contract.\n *\n * @param contractSrc the javascript source for the contract. Must declare a handle() function\n */\nexport function createContractExecutionEnvironment(arweave, contractSrc) {\n    // Convert from ES Module format to something we can run inside a Function.\n    // just removes the `export` keyword and adds ;return handle to the end of the function.\n    // We also assign the passed in SmartWeaveGlobal to SmartWeave, and declare \n    // the ContractError exception. \n    // We then use `new Function()` which we can call and get back the returned handle function\n    // which has access to the per-instance globals. \n    contractSrc = contractSrc.replace(/export\\s+async\\s+function\\s+handle/gmu, 'async function handle');\n    contractSrc = contractSrc.replace(/export\\s+function\\s+handle/gmu, 'function handle');\n    const ContractErrorDef = `class ContractError extends Error { constructor(message) { super(message); this.name = 'ContractError' } };`;\n    const ContractAssertDef = `function ContractAssert(cond, message) { if (!cond) throw new ContractError(message) };`;\n    const returningSrc = `const SmartWeave = swGlobal;\\n\\n${ContractErrorDef}\\n${ContractAssertDef}\\n${contractSrc}\\n\\n;return handle;`;\n    const swGlobal = new SmartWeaveGlobal(arweave);\n    const getContractFunction = new Function('swGlobal', returningSrc);\n    //console.log(returningSrc);\n    return {\n        handler: getContractFunction(swGlobal),\n        swGlobal\n    };\n}\n","import { loadContract } from './contract-load';\nimport { readContract } from './contract-read';\nimport { execute } from './contract-step';\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n */\nexport async function interactWrite(arweave, wallet, contractId, input) {\n    // Use a random value in the data body. We must put\n    // _something_ in the body, because a tx must have data or target\n    // to be valid. The value doesn't matter, but something sorta random\n    // helps because it will generate a different txid.\n    let interactionTx = await arweave.createTransaction({\n        data: Math.random()\n            .toString()\n            .slice(-4)\n    }, wallet);\n    if (!input) {\n        throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n    }\n    interactionTx.addTag('App-Name', 'SmartWeaveAction');\n    interactionTx.addTag('App-Version', '0.3.0');\n    interactionTx.addTag('Contract', contractId);\n    interactionTx.addTag('Input', JSON.stringify(input));\n    await arweave.transactions.sign(interactionTx, wallet);\n    const response = await arweave.transactions.post(interactionTx);\n    if (response.status != 200)\n        return false;\n    return interactionTx.id;\n}\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n */\nexport async function interactWriteDryRun(arweave, wallet, contractId, input) {\n    const contractInfo = await loadContract(arweave, contractId);\n    const latestState = await readContract(arweave, contractId);\n    const from = await arweave.wallets.jwkToAddress(wallet);\n    const interaction = {\n        input: input,\n        caller: from\n    };\n    return execute(contractInfo.handler, interaction, latestState);\n}\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n */\nexport async function interactRead(arweave, wallet, contractId, input) {\n    const contractInfo = await loadContract(arweave, contractId);\n    const latestState = await readContract(arweave, contractId);\n    const from = await arweave.wallets.jwkToAddress(wallet);\n    const interaction = {\n        input: input,\n        caller: from\n    };\n    const result = await execute(contractInfo.handler, interaction, latestState);\n    return result.result;\n}\n","/**\n * Given an map of address->balance, select one random address\n * weighted by the amount of tokens they hold.\n *\n * @param balances  A balances object, where the key is address and the value is the number of tokens they hold\n */\nexport function selectWeightedPstHolder(balances) {\n    // Count the total tokens\n    let totalTokens = 0;\n    for (const address of Object.keys(balances)) {\n        totalTokens += balances[address];\n    }\n    // Create a copy of balances where the amount each holder owns is represented\n    // by a value 0-1.\n    const weighted = {};\n    for (const address of Object.keys(balances)) {\n        weighted[address] = balances[address] / totalTokens;\n    }\n    let sum = 0;\n    const r = Math.random();\n    for (const address of Object.keys(weighted)) {\n        sum += weighted[address];\n        if (r <= sum && weighted[address] > 0) {\n            return address;\n        }\n    }\n    throw new Error(`Unable to select token holder`);\n}\n"],"names":[],"mappings":"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"}